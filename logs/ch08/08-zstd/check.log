make[1]: Entering directory '/sources/zstd-1.5.7/tests'
make[2]: Entering directory '/sources/zstd-1.5.7/programs'
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/debug.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/entropy_common.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/error_private.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/fse_decompress.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/pool.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/threading.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/xxhash.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_common.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/fse_compress.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/hist.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/huf_compress.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_compress.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_compress_literals.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_compress_sequences.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_compress_superblock.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_double_fast.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_fast.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_lazy.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_ldm.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_opt.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_preSplit.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstdmt_compress.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/huf_decompress.o
AS obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/huf_decompress_amd64.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_ddict.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_decompress.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_decompress_block.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/cover.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/divsufsort.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/fastcover.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zdict.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_v05.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_v06.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd_v07.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/benchfn.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/benchzstd.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/datagen.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/dibio.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/fileio.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/fileio_asyncio.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/lorem.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/timefn.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/util.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstdcli.o
CC obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstdcli_trace.o
==> building with threading support
==> building zstd with .gz compression support
==> building zstd with .xz/.lzma compression support
==> building zstd with .lz4 compression support
LINK obj/conf_faf1a63ed8ec52cbf8765aeb6fa5a660/zstd
zstd build completed
make[2]: Leaving directory '/sources/zstd-1.5.7/programs'
../programs/zstd: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 5.4.0, with debug_info, not stripped

Starting playTests.sh isWindows=false EXE_PREFIX='' ZSTD_BIN='../programs/zstd' DATAGEN_BIN='./datagen'
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
*** supports: zstd, zstd legacy v0.5+, gzip, lz4, lzma, xz 
zlib version 1.3.1
lz4 version 1.10.0
lzma version 5.8.1
_POSIX_C_SOURCE defined: 200809L
_POSIX_VERSION defined: 200809L 
PLATFORM_POSIX_VERSION defined: 200809L

===>  simple tests 
Compress or decompress the INPUT file(s); reads from STDIN if INPUT is `-` or not provided.

Usage: zstd [OPTIONS...] [INPUT... | -] [-o OUTPUT]

Options:
  -o OUTPUT                     Write output to a single file, OUTPUT.
  -k, --keep                    Preserve INPUT file(s). [Default] 
  --rm                          Remove INPUT file(s) after successful (de)compression.

  -#                            Desired compression level, where `#` is a number between 1 and 19;
                                lower numbers provide faster compression, higher numbers yield
                                better compression ratios. [Default: 3]

  -d, --decompress              Perform decompression.
  -D DICT                       Use DICT as the dictionary for compression or decompression.

  -f, --force                   Disable input and output checks. Allows overwriting existing files,
                                receiving input from the console, printing output to STDOUT, and
                                operating on links, block devices, etc. Unrecognized formats will be
                                passed-through through as-is.

  -h                            Display short usage and exit.
  -H, --help                    Display full help and exit.
  -V, --version                 Display the program version and exit.

*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***

Compress or decompress the INPUT file(s); reads from STDIN if INPUT is `-` or not provided.

Usage: zstd [OPTIONS...] [INPUT... | -] [-o OUTPUT]

Options:
  -o OUTPUT                     Write output to a single file, OUTPUT.
  -k, --keep                    Preserve INPUT file(s). [Default] 
  --rm                          Remove INPUT file(s) after successful (de)compression.

  -#                            Desired compression level, where `#` is a number between 1 and 19;
                                lower numbers provide faster compression, higher numbers yield
                                better compression ratios. [Default: 3]

  -d, --decompress              Perform decompression.
  -D DICT                       Use DICT as the dictionary for compression or decompression.

  -f, --force                   Disable input and output checks. Allows overwriting existing files,
                                receiving input from the console, printing output to STDOUT, and
                                operating on links, block devices, etc. Unrecognized formats will be
                                passed-through through as-is.

  -h                            Display short usage and exit.
  -H, --help                    Display full help and exit.
  -V, --version                 Display the program version and exit.

Advanced options:
  -c, --stdout                  Write to STDOUT (even if it is a console) and keep the INPUT file(s).

  -v, --verbose                 Enable verbose output; pass multiple times to increase verbosity.
  -q, --quiet                   Suppress warnings; pass twice to suppress errors.
  --trace LOG                   Log tracing information to LOG.

  --[no-]progress               Forcibly show/hide the progress counter. NOTE: Any (de)compressed
                                output to terminal will mix with progress counter text.

  -r                            Operate recursively on directories.
  --filelist LIST               Read a list of files to operate on from LIST.
  --output-dir-flat DIR         Store processed files in DIR.
  --output-dir-mirror DIR       Store processed files in DIR, respecting original directory structure.
  --[no-]asyncio                Use asynchronous IO. [Default: Enabled]

  --[no-]check                  Add XXH64 integrity checksums during compression. [Default: Add, Validate]
                                If `-d` is present, ignore/validate checksums during decompression.

  --                            Treat remaining arguments after `--` as files.

Advanced compression options:
  --ultra                       Enable levels beyond 19, up to 22; requires more memory.
  --fast[=#]                    Use to very fast compression levels. [Default: 1]
  --adapt                       Dynamically adapt compression level to I/O conditions.
  --long[=#]                    Enable long distance matching with window log #. [Default: 27]
  --patch-from=REF              Use REF as the reference point for Zstandard's diff engine. 

  -T#                           Spawn # compression threads. [Default: 1; pass 0 for core count.]
  --single-thread               Share a single thread for I/O and compression (slightly different than `-T1`).
  --auto-threads={physical|logical}
                                Use physical/logical cores when using `-T0`. [Default: Physical]

  -B#                           Set job size to #. [Default: 0 (automatic)]
  --rsyncable                   Compress using a rsync-friendly method (`-B` sets block size). 

  --exclude-compressed          Only compress files that are not already compressed.

  --stream-size=#               Specify size of streaming input from STDIN.
  --size-hint=#                 Optimize compression parameters for streaming input of approximately size #.
  --target-compressed-block-size=#
                                Generate compressed blocks of approximately # size.

  --no-dictID                   Don't write `dictID` into the header (dictionary compression only).
  --[no-]compress-literals      Force (un)compressed literals.
  --[no-]row-match-finder       Explicitly enable/disable the fast, row-based matchfinder for
                                the 'greedy', 'lazy', and 'lazy2' strategies.

  --format=zstd                 Compress files to the `.zst` format. [Default]
  --[no-]mmap-dict              Memory-map dictionary file rather than mallocing and loading all at once
  --format=gzip                 Compress files to the `.gz` format.
  --format=xz                   Compress files to the `.xz` format.
  --format=lzma                 Compress files to the `.lzma` format.
  --format=lz4                 Compress files to the `.lz4` format.

Advanced decompression options:
  -l                            Print information about Zstandard-compressed files.
  --test                        Test compressed file integrity.
  -M#                           Set the memory usage limit to # megabytes.
  --[no-]sparse                 Enable sparse mode. [Default: Enabled for files, disabled for STDOUT.]
  --[no-]pass-through           Pass through uncompressed files as-is. [Default: Disabled]

Dictionary builder:
  --train                       Create a dictionary from a training set of files.

  --train-cover[=k=#,d=#,steps=#,split=#,shrink[=#]]
                                Use the cover algorithm (with optional arguments).
  --train-fastcover[=k=#,d=#,f=#,steps=#,split=#,accel=#,shrink[=#]]
                                Use the fast cover algorithm (with optional arguments).

  --train-legacy[=s=#]          Use the legacy algorithm with selectivity #. [Default: 9]
  -o NAME                       Use NAME as dictionary name. [Default: dictionary]
  --maxdict=#                   Limit dictionary to specified size #. [Default: 112640]
  --dictID=#                    Force dictionary ID to #. [Default: Random]

Benchmark options:
  -b#                           Perform benchmarking with compression level #. [Default: 3]
  -e#                           Test all compression levels up to #; starting level is `-b#`. [Default: 1]
  -i#                           Set the minimum evaluation to time # seconds. [Default: 3]
  -B#                           Cut file into independent chunks of size #. [Default: No chunking]
  -S                            Output one benchmark result per input file. [Default: Consolidated result]
  -D dictionary                 Benchmark using dictionary 
  --priority=rt                 Set process priority to real-time.
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
test : basic compression 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
test : basic decompression
tmp.zst             : 65537 bytes 
test : too large compression level => auto-fix
Warning : compression level higher than max, reduced to 19 
tmp                  : 28.89%   (  64.0 KiB =>   18.5 KiB, tmp.zst) 
error: numeric value overflows 32-bit unsigned int 
test : --fast aka negative compression levels
tmp                  : 39.52%   (  64.0 KiB =>   25.3 KiB, tmp.zst) 
tmp                  : 43.51%   (  64.0 KiB =>   27.8 KiB, tmp.zst) 
tmp                  :100.02%   (  64.0 KiB =>   64.0 KiB, tmp.zst) 
error: numeric value overflows 32-bit unsigned int 
Incorrect parameter: --fast=0 
Compress or decompress the INPUT file(s); reads from STDIN if INPUT is `-` or not provided.

Usage: zstd [OPTIONS...] [INPUT... | -] [-o OUTPUT]

Options:
  -o OUTPUT                     Write output to a single file, OUTPUT.
  -k, --keep                    Preserve INPUT file(s). [Default] 
  --rm                          Remove INPUT file(s) after successful (de)compression.

  -#                            Desired compression level, where `#` is a number between 1 and 19;
                                lower numbers provide faster compression, higher numbers yield
                                better compression ratios. [Default: 3]

  -d, --decompress              Perform decompression.
  -D DICT                       Use DICT as the dictionary for compression or decompression.

  -f, --force                   Disable input and output checks. Allows overwriting existing files,
                                receiving input from the console, printing output to STDOUT, and
                                operating on links, block devices, etc. Unrecognized formats will be
                                passed-through through as-is.

  -h                            Display short usage and exit.
  -H, --help                    Display full help and exit.
  -V, --version                 Display the program version and exit.

test : too large numeric argument
error: numeric value overflows 32-bit unsigned int 
test : set compression level with environment variable ZSTD_CLEVEL
tmp                  : 30.82%   (  64.0 KiB =>   19.7 KiB, tmp.zst) 
tmp                  : 63.44%   (  64.0 KiB =>   40.6 KiB, tmp.zst) 
tmp                  : 30.82%   (  64.0 KiB =>   19.7 KiB, tmp.zst) 
Ignore environment variable setting ZSTD_CLEVEL=: not a valid integer value 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
Ignore environment variable setting ZSTD_CLEVEL=-: not a valid integer value 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
Ignore environment variable setting ZSTD_CLEVEL=a: not a valid integer value 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
Ignore environment variable setting ZSTD_CLEVEL=+a: not a valid integer value 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
Ignore environment variable setting ZSTD_CLEVEL=3a7: not a valid integer value 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
Ignore environment variable setting ZSTD_CLEVEL=50000000000: numeric value too large 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
test : override ZSTD_CLEVEL with command line option
tmp                  : 43.51%   (  64.0 KiB =>   27.8 KiB, tmp.zst) 
test : compress to stdout
test : compress to named file (-o)
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmpCompressed) 
test : force write, correct order
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmpCompressed) 
test : -c + -o : last one wins
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmpOut) 
test : forgotten argument
error: missing command argument 
test : implied stdout when input is stdin
bob
test : null-length file roundtrip
-n 
test : ensure small file doesn't add 3-bytes null block
14
14
test : decompress file with wrong suffix (must fail)
zstd: tmpCompressed: unknown suffix (.zst/.tzst/.gz/.tgz/.lzma/.xz/.txz/.lz4/.tlz4 expected). Can't derive the output file name. Specify it with -o dstFileName. Ignoring.
zstd: tmp: unknown suffix (.zst/.tzst/.gz/.tgz/.lzma/.xz/.txz/.lz4/.tlz4 expected). Can't derive the output file name. Specify it with -o dstFileName. Ignoring.
test : decompress into stdout
test : decompress from stdin into stdout
test : impose memory limitation (must fail)
tmplimit             : 30.34%   (   500 KiB =>    152 KiB, tmplimit.zst) 
tmplimit.zst : Decoding error (36) : Frame requires too much memory for decoding 
tmplimit.zst : Window size larger than maximum : 512000 > 2048 
tmplimit.zst : Use --long=19 or --memory=1MB 
tmplimit.zst : Decoding error (36) : Frame requires too much memory for decoding 
tmplimit.zst : Window size larger than maximum : 512000 > 2048 
tmplimit.zst : Use --long=19 or --memory=1MB 
tmplimit.zst : Decoding error (36) : Frame requires too much memory for decoding 
tmplimit.zst : Window size larger than maximum : 512000 > 2048 
tmplimit.zst : Use --long=19 or --memory=1MB 
error: command cannot be separated from its argument by another command 
test : overwrite protection
zstd: tmp.zst already exists; not overwritten  
test : force overwrite
test : overwrite readonly file
zstd: tmpro.zst already exists; not overwritten  
test: --no-progress flag
/*stdin*\           : 4 bytes 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmpro                :425.00%   (     4 B =>     17 B, /*stdout*\) 
/*stdin*\           : 4 bytes 
test: --progress flag
/*stdin*\            : 0 B...                                                                                    /*stdin*\           : 4 bytes 
/*stdin*\            : 0 B...                                                                                    /*stdin*\           : 4 bytes 
/*stdin*\           : 4 bytes 
test: overwrite input file (must fail)
zstd: Refusing to open an output file which will overwrite the input file 
zstd: Refusing to open an output file which will overwrite the input file 
test: detect that input file does not exist
zstd: can't stat nothere : No such file or directory -- ignored 
test: --[no-]compress-literals
/*stdin*\           : 65537 bytes 
/*stdin*\           : 65537 bytes 
/*stdin*\           : 65537 bytes 
/*stdin*\           : 65537 bytes 
/*stdin*\           : 65537 bytes 
/*stdin*\           : 65537 bytes 
Loading tmp...                                                                              |-tmp               :     65537 ->  |-tmp               :     65537 ->     22495 (x2.913),   7.21 MB/s  |-tmp               :     65537 ->     22495 (x2.913),   7.21 MB/s,    6.4 MB/s-1#
                                                                       |-tmp               :     65537 ->  |-tmp               :     65537 ->     21071 (x3.110),   4.85 MB/s  |-tmp               :     65537 ->     21071 (x3.110),   4.85 MB/s,   13.7 MB/s 0#
                                                                       |-tmp               :     65537 ->  |-tmp               :     65537 ->     22162 (x2.957),   5.90 MB/s  |-tmp               :     65537 ->     22162 (x2.957),   5.90 MB/s,    7.8 MB/s 1#
Loading tmp...                                                                              |-tmp               :     65537 ->  |-tmp               :     65537 ->     25894 (x2.531),   5.30 MB/s  |-tmp               :     65537 ->     25894 (x2.531),   5.30 MB/s,   15.3 MB/s-1#
                                                                       |-tmp               :     65537 ->  |-tmp               :     65537 ->     23099 (x2.837),   4.86 MB/s  |-tmp               :     65537 ->     23099 (x2.837),   4.86 MB/s,   12.8 MB/s 0#
                                                                       |-tmp               :     65537 ->  |-tmp               :     65537 ->     26878 (x2.438),   7.93 MB/s  |-tmp               :     65537 ->     26878 (x2.438),   7.93 MB/s,   13.1 MB/s 1#
test: --no-check for decompression
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp_corrupt.zst) 
tmp                  : 32.15%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
4+0 records in
4+0 records out
4 bytes copied, 0.000992004 s, 4.0 kB/s
tmp_corrupt.zst     : 65537 bytes 
tmp_corrupt.zst     : 65537 bytes 
tmp.zst             : 65537 bytes 
./playTests.sh: line 330: which: command not found

===>  multiple_thread test 
test : single-thread 
tmp                  : 39.52%   (  64.0 KiB =>   25.3 KiB, tmpMT0) 
test : one worker thread (default)
tmp                  : 39.52%   (  64.0 KiB =>   25.3 KiB, tmpMT1) 
test : two worker threads 
tmp                  : 39.52%   (  64.0 KiB =>   25.3 KiB, tmpMT2) 
test : 16-thread 
tmp                  : 39.52%   (  64.0 KiB =>   25.3 KiB, tmpMT3) 
test : 127-thread 
tmp                  : 39.52%   (  64.0 KiB =>   25.3 KiB, tmpMT4) 
test : 128-thread 
tmp                  : 39.52%   (  64.0 KiB =>   25.3 KiB, tmpMT5) 
test : max allowed numeric value is 4294967295 
tmp                  : 39.52%   (  64.0 KiB =>   25.3 KiB, tmpMT6) 
test : numeric value overflows 32-bit unsigned int 
error: numeric value overflows 32-bit unsigned int 
test : basic compression 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
test : basic decompression
tmp.zst             : 65537 bytes 
note : decompression does not support -T mode, but execution support

===>  --fast_argument test 
test : basic compression 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
test: --fast=1
tmp                  : 39.52%   (  64.0 KiB =>   25.3 KiB, tmp.zst) 
test: --fast=99
tmp                  : 97.94%   (  64.0 KiB =>   62.7 KiB, tmp.zst) 
test: Invalid value -- negative number
Incorrect parameter: --fast=-1 
Compress or decompress the INPUT file(s); reads from STDIN if INPUT is `-` or not provided.

Usage: zstd [OPTIONS...] [INPUT... | -] [-o OUTPUT]

Options:
  -o OUTPUT                     Write output to a single file, OUTPUT.
  -k, --keep                    Preserve INPUT file(s). [Default] 
  --rm                          Remove INPUT file(s) after successful (de)compression.

  -#                            Desired compression level, where `#` is a number between 1 and 19;
                                lower numbers provide faster compression, higher numbers yield
                                better compression ratios. [Default: 3]

  -d, --decompress              Perform decompression.
  -D DICT                       Use DICT as the dictionary for compression or decompression.

  -f, --force                   Disable input and output checks. Allows overwriting existing files,
                                receiving input from the console, printing output to STDOUT, and
                                operating on links, block devices, etc. Unrecognized formats will be
                                passed-through through as-is.

  -h                            Display short usage and exit.
  -H, --help                    Display full help and exit.
  -V, --version                 Display the program version and exit.

test: Invalid value -- zero
Incorrect parameter: --fast=0 
Compress or decompress the INPUT file(s); reads from STDIN if INPUT is `-` or not provided.

Usage: zstd [OPTIONS...] [INPUT... | -] [-o OUTPUT]

Options:
  -o OUTPUT                     Write output to a single file, OUTPUT.
  -k, --keep                    Preserve INPUT file(s). [Default] 
  --rm                          Remove INPUT file(s) after successful (de)compression.

  -#                            Desired compression level, where `#` is a number between 1 and 19;
                                lower numbers provide faster compression, higher numbers yield
                                better compression ratios. [Default: 3]

  -d, --decompress              Perform decompression.
  -D DICT                       Use DICT as the dictionary for compression or decompression.

  -f, --force                   Disable input and output checks. Allows overwriting existing files,
                                receiving input from the console, printing output to STDOUT, and
                                operating on links, block devices, etc. Unrecognized formats will be
                                passed-through through as-is.

  -h                            Display short usage and exit.
  -H, --help                    Display full help and exit.
  -V, --version                 Display the program version and exit.

test: max allowed numeric argument of --fast is 4294967295
tmp                  :100.02%   (  64.0 KiB =>   64.0 KiB, tmp.zst) 
test: numeric value overflows 32-bit unsigned int 
error: numeric value overflows 32-bit unsigned int 

===>  --exclude-compressed flag
  2 files compressed : 32.16% (   128 KiB =>   41.2 KiB)
  4 files compressed : 32.16% (   128 KiB =>   41.2 KiB)
Test is successful. input.5.zst is precompressed and therefore not compressed/modified again.
  5 files compressed : 32.16% (  64.0 KiB =>   20.6 KiB)
  5 files compressed : 100.07% (   103 KiB =>    103 KiB)
  8 files compressed : (     0   B =>      0   B)
  8 files compressed : 55.86% (   295 KiB =>    165 KiB)
Test completed

===>  warning prompts should not occur if stdin is an input
tmpPrompt            :192.86%   (    14 B =>     27 B, tmpPrompt.zst) 
zstd: tmpPrompt.zst already exists; stdin is an input - not proceeding.
/*stdin*\            :192.86%   (    14 B =>     27 B, tmpPrompt.zst) 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
zstd: tmpPrompt.zst already exists; overwrite (y/n) ? tmpPrompt            :192.86%   (    14 B =>     27 B, tmpPrompt.zst) 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
zstd: tmpPrompt.zst already exists; stdin is an input - not proceeding.
zstd: WARNING: all input files will be processed and concatenated into a single output file: tmpPromp.zst 
The concatenated output CANNOT regenerate original file names nor directory structure. 
Since it's a destructive operation, input files will not be removed. 
stdin is an input - not proceeding.
Test completed

===>  recursive mode test 
please provide correct input file(s) or non-empty directories -- ignored 

===>  file removal
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
tmp.zst             : 65537 bytes 
test: --rm is disabled when output is stdout
test: --rm is disabled when multiple inputs are concatenated into a single output
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
zstd: WARNING: all input files will be processed and concatenated into a single output file: tmp3.zst 
The concatenated output CANNOT regenerate original file names nor directory structure. 
Since it's a destructive operation, input files will not be removed. 
Proceed? (y/n): tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp3.zst) 
tmp2                 : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp3.zst) 
  2 files compressed : 32.16% (   128 KiB =>   41.2 KiB)
zstd: WARNING: all input files will be processed and concatenated into a single output file: tmp3.zst 
The concatenated output CANNOT regenerate original file names nor directory structure. 
Since it's a destructive operation, input files will not be removed. 
  2 files compressed : 32.16% (   128 KiB =>   41.2 KiB)
Concatenating multiple processed inputs into a single output loses file metadata. 
Aborting. 
test: --rm is active with -o when single input
tmp2                 : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp2.zst) 
test: -c followed by -o => -o wins, so --rm remains active
tmp2                 : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp2.zst) 
test: -o followed by -c => -c wins, so --rm is disabled
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Note: src files are not removed when output is stdout 
tmp2                 : 32.16%   (  64.0 KiB =>   20.6 KiB, /*stdout*\) 
test : should quietly not remove non-regular file
test : --rm on stdin
zstd: can't stat tmp : No such file or directory -- ignored 
test : -d -f do not delete destination when source is not present
zstd: can't stat tmp.zst : No such file or directory -- ignored 
test : -f do not delete destination when source is not present
zstd: can't stat tmp : No such file or directory -- ignored 

===>  decompression only tests 
1+0 records in
1+0 records out
1048576 bytes (1.0 MB, 1.0 MiB) copied, 0.0129357 s, 81.1 MB/s
/sources/zstd-1.5.7/tests/../tests/golden-decompression/rle-first-block.zst: 1048576 bytes 
Files tmp1 and tmp are identical
/sources/zstd-1.5.7/tests/../tests/golden-decompression/empty-block.zst: 0 bytes 
Files tmp2 and tmp_empty are identical
/sources/zstd-1.5.7/tests/../tests/golden-decompression/zeroSeq_2B.zst: 13 bytes 
/sources/zstd-1.5.7/tests/../tests/golden-decompression-errors/zeroSeq_extraneous.zst : Decoding error (36) : Data corruption detected 

===>  compress multiple files
zstd: WARNING: all input files will be processed and concatenated into a single output file: /dev/null 
The concatenated output CANNOT regenerate original file names nor directory structure. 
  2 files compressed : 316.67% (    12   B =>     38   B)
/*stdin*\           : 12 bytes 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
zstd: WARNING: all input files will be processed and concatenated into a single output file: tmp.zst 
The concatenated output CANNOT regenerate original file names nor directory structure. 
Proceed? (y/n): tmp1                 :316.67%   (     6 B =>     19 B, tmp.zst) 
tmp2                 :316.67%   (     6 B =>     19 B, tmp.zst) 
  2 files compressed : 316.67% (    12   B =>     38   B)
  2 files compressed : 316.67% (    12   B =>     38   B)
2 files decompressed :     12 bytes total 
hello
world
zstd: WARNING: all input files will be processed and concatenated into a single output file: /dev/null 
The concatenated output CANNOT regenerate original file names nor directory structure. 
  2 files compressed : 168.42% (    38   B =>     64   B)
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
zstd: WARNING: all input files will be processed and concatenated into a single output file: tmp 
The concatenated output CANNOT regenerate original file names nor directory structure. 
Proceed? (y/n): tmp1.zst            : 6 bytes 
tmp2.zst            : 6 bytes 
2 files decompressed :     12 bytes total 
zstd: WARNING: all input files will be processed and concatenated into a single output file: tmpexists 
The concatenated output CANNOT regenerate original file names nor directory structure. 
  2 files compressed : 316.67% (    12   B =>     38   B)
Concatenating multiple processed inputs into a single output loses file metadata. 
Aborting. 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Compressing with 2 worker threads 
--zstd=wlog=10,clog=6,hlog=7,slog=2,mml=4,tlen=0,strat=2
--zstd=wlog=10,clog=6,hlog=7,slog=2,mml=4,tlen=0,strat=2
--format=.zst --no-sparse --block-size=0 --memory=134217728 --threads=2 --content-size
zstd: WARNING: all input files will be processed and concatenated into a single output file: tmp_rm3.zst 
The concatenated output CANNOT regenerate original file names nor directory structure. 
Proceed? (y/n): Decompression will require 7 B of memory
tmp_rm1              :285.71%   (     7 B =>     20 B, tmp_rm3.zst) 
tmp_rm1              : Completed in 0.00 sec  (cpu load : 128%)
Decompression will require 4 B of memory
tmp_rm2              :425.00%   (     4 B =>     17 B, tmp_rm3.zst) 
tmp_rm2              : Completed in 0.01 sec  (cpu load : 56%)
  2 files compressed : 336.36% (    11   B =>     37   B)
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Compressing with 1 worker threads 
zstd: WARNING: all input files will be processed and concatenated into a single output file: tmp_rm_out 
The concatenated output CANNOT regenerate original file names nor directory structure. 
Since it's a destructive operation, input files will not be removed. 
Proceed? (y/n): Sparse File Support is disabled when output is not a file 
tmp_rm3.zst         : 11 bytes 
tmp_rm4.zst         : 11 bytes 
2 files decompressed :     22 bytes total 

===>  multiple files and shell completion 
compress tmp* : 
 15 files compressed : 33.28% (  1.21 MiB =>    413 KiB)
decompress tmp* : 
16 files decompressed : 1270249 bytes total 
compress tmp* into stdout > tmpall : 
decompress tmpall* into stdout > tmpdec : 
compress multiple files including a missing one (notHere) : 
zstd: can't stat notHere : No such file or directory -- ignored 
  2 files compressed : 31.88% (   164 KiB =>   52.3 KiB)

===>  zstd fifo named pipe test 
tmp_named_pipe       :200.00%   (    13 B =>     26 B, tmp_compressed) 
tmp_compressed      : 13 bytes 
Files tmp_original and tmp_decompressed are identical

===>  zstd created file permissions tests
test : copy 666 permissions in file -> file compression 
tmp1                 : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp1.zst) 
test : copy 666 permissions in file -> file decompression 
tmp1.zst            : 65537 bytes 
test : copy 400 permissions in file -> file compression (write to a read-only file) 
tmp1                 : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp1.zst) 
test : copy 400 permissions in file -> file decompression (write to a read-only file) 
tmp1.zst            : 65537 bytes 
test : check created permissions from stdin input in compression 
/*stdin*\            : 32.10%   (  64.0 KiB =>   20.5 KiB, tmp1.zst) 
test : check created permissions from stdin input in decompression 
/*stdin*\           : 65537 bytes 
test : check created permissions from multiple inputs in compression 
zstd: WARNING: all input files will be processed and concatenated into a single output file: tmp1.zst 
The concatenated output CANNOT regenerate original file names nor directory structure. 
  2 files compressed : 32.16% (   128 KiB =>   41.2 KiB)
test : check created permissions from multiple inputs in decompression 
zstd: WARNING: all input files will be processed and concatenated into a single output file: tmp1.out 
The concatenated output CANNOT regenerate original file names nor directory structure. 
2 files decompressed : 262148 bytes total 
test : check permissions on pre-existing output file in compression 
tmp1                 : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp1.zst) 
test : check permissions on pre-existing output file in decompression 
tmp1.zst            : 65537 bytes 
test : respect umask when compressing from stdin input 
/*stdin*\            : 32.10%   (  64.0 KiB =>   20.5 KiB, tmp1.zst) 
test : respect umask when decompressing from stdin input 
/*stdin*\           : 65537 bytes 

===>  zstd created file timestamp tests
test : copy mtime in file -> file compression 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
MTIME 946674000 946674000
test : copy mtime in file -> file decompression 
tmp.zst             : 65537 bytes 
MTIME 946674000 946674000

===>  compress multiple files into an output directory, --output-dir-flat
  2 files compressed : 336.36% (    11   B =>     37   B)
test : decompress multiple files into an output directory, --output-dir-flat
2 files decompressed :     11 bytes total 
2 files decompressed :     11 bytes total 

===>  compress multiple files into an output directory and mirror input folder, --output-dir-mirror
  2 files compressed : 186.67% (    30   B =>     56   B)
test: compress input dir will be ignored if it has '..'
zstd: --output-dir-mirror cannot compress 'tmpInputTestDir/we/.../..must/../..mustgo/deeper..' into 'non-exist' 
zstd: --output-dir-mirror cannot compress 'tmpInputTestDir/we/.../..must/deeper../..' into 'non-exist' 
zstd: --output-dir-mirror cannot compress '../tests/tmpInputTestDir/we/.../..must/deeper..' into 'non-exist' 
test: compress input dir should succeed with benign uses of '..'
tmpInputTestDir/we/.../..must/go/deeper../tmp2 :360.00%   (     5 B =>     18 B, tmpout/tmpInputTestDir/we/.../..must/go/deeper../tmp2.zst) 
test : decompress multiple files into an output directory, --output-dir-mirror
2 files decompressed :     30 bytes total 
test: decompress input dir will be ignored if it has '..'
zstd: --output-dir-mirror cannot compress 'tmpOutDir/tmpInputTestDir/we/.../..must/../..must/go/deeper../tmp2.zst' into 'non-exist' 
test : compress multiple files reading them from a file, --filelist=FILE
  2 files compressed : 165.00% (    40   B =>     66   B)
test : alternate syntax: --filelist FILE
  2 files compressed : 165.00% (    40   B =>     66   B)
test : reading file list from a symlink, --filelist=FILE
  2 files compressed : 165.00% (    40   B =>     66   B)
test : compress multiple files reading them from multiple files, --filelist=FILE
  4 files compressed : 165.00% (    80   B =>    132   B)
test : decompress multiple files reading them from a file, --filelist=FILE
2 files decompressed :     40 bytes total 
test : decompress multiple files reading them from multiple files, --filelist=FILE
4 files decompressed :     80 bytes total 
test : survive the list of files with too long filenames (--filelist=FILE)
test : survive a list of files which is text garbage (--filelist=FILE)
test : survive a list of files which is binary garbage (--filelist=FILE)
test : try to overflow internal list of files (--filelist=FILE)
 35 files compressed : 100.02% (  2.00 MiB =>   2.00 MiB)

===> --[no-]content-size tests
tmp_contentsize      : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp_contentsize.zst) 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Decompressed Size: 64.0 KiB (65537 B)
tmp_contentsize      : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp_contentsize.zst) 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmp_contentsize      : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp_contentsize.zst) 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Decompressed Size: 64.0 KiB (65537 B)
tmp_contentsize      : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp_contentsize.zst) 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
test : show-default-cparams regular
tmp (65537 bytes)
 - windowLog     : 17
 - chainLog      : 15
 - hashLog       : 16
 - searchLog     : 2
 - minMatch      : 5
 - targetLength  : 0
 - strategy      : ZSTD_dfast (2)
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
error : can't use --show-default-cparams in decompression mode 
test : show-default-cparams recursive
tmp_files/tmp3 (257000 bytes)
 - windowLog     : 18
 - chainLog      : 16
 - hashLog       : 16
 - searchLog     : 1
 - minMatch      : 4
 - targetLength  : 0
 - strategy      : ZSTD_dfast (2)
tmp_files/tmp2 (129000 bytes)
 - windowLog     : 17
 - chainLog      : 15
 - hashLog       : 16
 - searchLog     : 2
 - minMatch      : 5
 - targetLength  : 0
 - strategy      : ZSTD_dfast (2)
tmp_files/tmp1 (15000 bytes)
 - windowLog     : 14
 - chainLog      : 14
 - hashLog       : 15
 - searchLog     : 2
 - minMatch      : 4
 - targetLength  : 0
 - strategy      : ZSTD_dfast (2)
  3 files compressed : 31.65% (   392 KiB =>    124 KiB)
test : show compression parameters in verbose mode

===>  Advanced compression parameters 
Incorrect parameter: --zstd=windowLog=21, 
Compress or decompress the INPUT file(s); reads from STDIN if INPUT is `-` or not provided.

Usage: zstd [OPTIONS...] [INPUT... | -] [-o OUTPUT]

Options:
  -o OUTPUT                     Write output to a single file, OUTPUT.
  -k, --keep                    Preserve INPUT file(s). [Default] 
  --rm                          Remove INPUT file(s) after successful (de)compression.

  -#                            Desired compression level, where `#` is a number between 1 and 19;
                                lower numbers provide faster compression, higher numbers yield
                                better compression ratios. [Default: 3]

  -d, --decompress              Perform decompression.
  -D DICT                       Use DICT as the dictionary for compression or decompression.

  -f, --force                   Disable input and output checks. Allows overwriting existing files,
                                receiving input from the console, printing output to STDOUT, and
                                operating on links, block devices, etc. Unrecognized formats will be
                                passed-through through as-is.

  -h                            Display short usage and exit.
  -H, --help                    Display full help and exit.
  -V, --version                 Display the program version and exit.

Incorrect parameter: --zstd=windowLo=21 
Compress or decompress the INPUT file(s); reads from STDIN if INPUT is `-` or not provided.

Usage: zstd [OPTIONS...] [INPUT... | -] [-o OUTPUT]

Options:
  -o OUTPUT                     Write output to a single file, OUTPUT.
  -k, --keep                    Preserve INPUT file(s). [Default] 
  --rm                          Remove INPUT file(s) after successful (de)compression.

  -#                            Desired compression level, where `#` is a number between 1 and 19;
                                lower numbers provide faster compression, higher numbers yield
                                better compression ratios. [Default: 3]

  -d, --decompress              Perform decompression.
  -D DICT                       Use DICT as the dictionary for compression or decompression.

  -f, --force                   Disable input and output checks. Allows overwriting existing files,
                                receiving input from the console, printing output to STDOUT, and
                                operating on links, block devices, etc. Unrecognized formats will be
                                passed-through through as-is.

  -h                            Display short usage and exit.
  -H, --help                    Display full help and exit.
  -V, --version                 Display the program version and exit.

Incorrect parameter: --zstd=windowLog=21,slog 
Compress or decompress the INPUT file(s); reads from STDIN if INPUT is `-` or not provided.

Usage: zstd [OPTIONS...] [INPUT... | -] [-o OUTPUT]

Options:
  -o OUTPUT                     Write output to a single file, OUTPUT.
  -k, --keep                    Preserve INPUT file(s). [Default] 
  --rm                          Remove INPUT file(s) after successful (de)compression.

  -#                            Desired compression level, where `#` is a number between 1 and 19;
                                lower numbers provide faster compression, higher numbers yield
                                better compression ratios. [Default: 3]

  -d, --decompress              Perform decompression.
  -D DICT                       Use DICT as the dictionary for compression or decompression.

  -f, --force                   Disable input and output checks. Allows overwriting existing files,
                                receiving input from the console, printing output to STDOUT, and
                                operating on links, block devices, etc. Unrecognized formats will be
                                passed-through through as-is.

  -h                            Display short usage and exit.
  -H, --help                    Display full help and exit.
  -V, --version                 Display the program version and exit.

zstd: error 11 : Parameter is out of bound 
roundTripTest: datagen -g512K  | zstd -v | zstd -d
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 30.33%   (   512 KiB =>    155 KiB, /*stdout*\) 
roundTripTest: datagen -g512K  | zstd -v --zstd=mml=3,tlen=48,strat=6 | zstd -d --zstd=mml=3,tlen=48,strat=6
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 30.75%   (   512 KiB =>    157 KiB, /*stdout*\) 
roundTripTest: datagen -g512K  | zstd -v --zstd=strat=6,wlog=23,clog=23,hlog=22,slog=6 | zstd -d --zstd=strat=6,wlog=23,clog=23,hlog=22,slog=6
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 27.70%   (   512 KiB =>    142 KiB, /*stdout*\) 
roundTripTest: datagen -g512K  | zstd -v --zstd=windowLog=23,chainLog=23,hashLog=22,searchLog=6,minMatch=3,targetLength=48,strategy=6 | zstd -d --zstd=windowLog=23,chainLog=23,hashLog=22,searchLog=6,minMatch=3,targetLength=48,strategy=6
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 27.72%   (   512 KiB =>    142 KiB, /*stdout*\) 
roundTripTest: datagen -g512K  | zstd -v --single-thread --long --zstd=ldmHashLog=20,ldmMinMatch=64,ldmBucketSizeLog=1,ldmHashRateLog=7 | zstd -d --single-thread --long --zstd=ldmHashLog=20,ldmMinMatch=64,ldmBucketSizeLog=1,ldmHashRateLog=7
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 30.33%   (   512 KiB =>    155 KiB, /*stdout*\) 
roundTripTest: datagen -g512K  | zstd -v --single-thread --long --zstd=lhlog=20,lmml=64,lblog=1,lhrlog=7 | zstd -d --single-thread --long --zstd=lhlog=20,lmml=64,lblog=1,lhrlog=7
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 30.33%   (   512 KiB =>    155 KiB, /*stdout*\) 
roundTripTest: datagen -g64K  | zstd -v19 --zstd=strat=9 | zstd -d19 --zstd=strat=9
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 28.89%   (  64.0 KiB =>   18.5 KiB, /*stdout*\) 

===>  Pass-Through mode 
Hello world 1!
Hello world 2!
Hello world 3!

===>  frame concatenation 
hello 
world!
frame concatenation without checksum
testing zstdcat symlink
testing zcat symlink
frame concatenation tests completed

**** flush write error test **** 
println foo | zstd > /dev/full
zstd: /*stdout*\: No space left on device 
println foo | zstd | zstd -d > /dev/full
zstd: /*stdout*\: No space left on device 

===>  symbolic link test 
Warning : world.tmp is a symbolic link, ignoring 
hello.tmp            :208.33%   (    12 B =>     25 B, hello.tmp.zst) 
Warning : world.tmp is a symbolic link, ignoring 
Warning : world.tmp is a symbolic link, ignoring 
Warning : world2.tmp is a symbolic link, ignoring 
  2 files compressed : 208.33% (    24   B =>     50   B)

===>  test sparse file support 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\           : 5242880 bytes 
Files tmpSparse and tmpSparseRegen are identical
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\           : 5242880 bytes 
Files tmpSparse and tmpOutSparse are identical
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\           : 5242880 bytes 
Files tmpSparse and tmpOutNoSparse are identical
5120 -rw-r--r-- 1 root root 5242880 Sep 22 15:53 tmpSparse
5120 -rw-r--r-- 1 root root 5242880 Sep 22 15:53 tmpSparseRegen
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\           : 1200007 bytes 
Files - and tmpSparseOdd are identical
44 -rw-r--r-- 1 root root 1200007 Sep 22 15:53 tmpSparseOdd

 Sparse Compatibility with Console :
Hello World 1 !
Hello World 2 !

 Sparse Compatibility with Append :
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmpSparse1M          :  0.01%   ( 1.000 MiB =>     67 B, tmpSparseCompressed) 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmpSparseCompressed : 1048576 bytes 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmpSparseCompressed : 1048576 bytes 
5120 -rw-r--r-- 1 root root 5242880 Sep 22 15:53 tmpSparse
1024 -rw-r--r-- 1 root root 1048576 Sep 22 15:53 tmpSparse1M
2048 -rw-r--r-- 1 root root 2097152 Sep 22 15:53 tmpSparse2M
   4 -rw-r--r-- 1 root root      67 Sep 22 15:53 tmpSparseCompressed
  44 -rw-r--r-- 1 root root 1200007 Sep 22 15:53 tmpSparseOdd
5120 -rw-r--r-- 1 root root 5242880 Sep 22 15:53 tmpSparseRegen
2048 -rw-r--r-- 1 root root 2097152 Sep 22 15:53 tmpSparseRegenerated

===>  stream-size mode
test : basic file compression vs sized streaming compression
tmp                  : 34.61%   (  10.7 KiB =>   3.72 KiB, tmp.zst) 
test : sized streaming compression and decompression
tmp                  : 34.61%   (  10.7 KiB =>   3.72 KiB, tmp.zst) 
tmp.zst             : 11000 bytes 
test : incorrect stream size
zstd: error 11 : Src size is incorrect 

===>  zstd zero weight dict test 
tmp_input            :103.27%   (   153 B =>    158 B, tmp_input.zst) 
tmp_input.zst       : 153 bytes 

===>  zstd (valid) zero weight dict test 
tmp_input            : 96.15%   (    26 B =>     25 B, tmp_input.zst) 
tmp_input.zst       : 26 bytes 

===>  size-hint mode
test : basic file compression vs hinted streaming compression
tmp                  : 34.61%   (  10.7 KiB =>   3.72 KiB, tmp.zst) 
test : hinted streaming compression and decompression
/*stdin*\            : 34.60%   (  10.7 KiB =>   3.72 KiB, tmp.zst) 
tmp.zst             : 11000 bytes 
test : hinted streaming compression with dictionary
/*stdin*\           : 11000 bytes 
test : multiple file compression with hints and dictionary
  2 files compressed : 0.26% (  21.5 KiB =>     58   B)
tmp                  :  0.26%   (  10.7 KiB =>     29 B, tmp1_.zst) 
tmp2                 :  0.26%   (  10.7 KiB =>     29 B, tmp2_.zst) 
test : incorrect hinted stream sizes
/*stdin*\           : 11000 bytes 
/*stdin*\           : 11000 bytes 
/*stdin*\           : 11000 bytes 
/*stdin*\           : 11000 bytes 
test : allows and interprets K,KB,KiB,M,MB and MiB suffix
/*stdin*\           : 11000 bytes 
/*stdin*\           : 11000 bytes 
/*stdin*\           : 11000 bytes 
/*stdin*\           : 11000 bytes 
/*stdin*\           : 11000 bytes 
/*stdin*\           : 11000 bytes 

===>  dictionary tests 
- Test high/low compressibility corpus training
Loading tmpCorpusHighCompress...                                                                                      Trying 5 different sets of parameters
20%       80%       100%                                                                                      k=1998
d=8
f=20
steps=4
split=75
accel=1
Save dictionary of size 112640 into file tmpDictHighCompress 
Loading tmpCorpusLowCompress...                                                                                      Trying 5 different sets of parameters
20%       80%                                                                                      k=537
d=8
f=20
steps=4
split=75
accel=1
Save dictionary of size 112640 into file tmpDictLowCompress 
- Test with raw dict (content only) 
- Create first dictionary 
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 5 different sets of parameters
WARNING: The maximum dictionary size 112640 is too large compared to the source size 667029! size(source)/size(dictionary) = 5.921777, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
80%       100%                                                                                      k=1511
d=8
f=20
steps=4
split=75
accel=1
Save dictionary of size 112640 into file tmpDict 
- Test dictionary compression with tmpDict as an input file and dictionary
zstd: cannot use tmpDict as an input file and dictionary 
- Dictionary compression roundtrip
tmp                  : 18.24%   (  76.6 KiB =>   14.0 KiB, tmp.zst) 
tmp.zst             : 78430 bytes 
- Dictionary compression with hlog < clog
tmp                  : 16.30%   (  76.6 KiB =>   12.5 KiB, tmp.zst) 
- Dictionary compression with btlazy2 strategy
tmp                  : 16.49%   (  76.6 KiB =>   12.6 KiB, tmp.zst) 
tmp.zst             : 78430 bytes 
- Test rejecting irregular dictionary file
zstd: error 32 : Dictionary /proc/self/fd/0 must be a regular file. 
zstd: error 32 : Dictionary /proc/self/fd/0 must be a regular file. 
- Test dictionary compression with multithreading 
/*stdin*\           : 5242880 bytes 
- Create second (different) dictionary 
Loading /sources/zstd-1.5.7/tests/../programs/util.c...                                                                                      Trying 5 different sets of parameters
WARNING: The maximum dictionary size 112640 is too large compared to the source size 620286! size(source)/size(dictionary) = 5.506800, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
80%       100%                                                                                      k=1511
d=8
f=20
steps=4
split=75
accel=1
Save dictionary of size 112640 into file tmpDictC 
tmp.zst : Decoding error (36) : Dictionary mismatch 
- Create dictionary with short dictID
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 5 different sets of parameters
WARNING: The maximum dictionary size 112640 is too large compared to the source size 667029! size(source)/size(dictionary) = 5.921777, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
80%       100%                                                                                      k=1511
d=8
f=20
steps=4
split=75
accel=1
Save dictionary of size 112640 into file tmpDict1 
tmpDict tmpDict1 differ: char 5, line 1
- Create dictionary with wrong dictID parameter order (must fail)
error: command cannot be separated from its argument by another command 
- Create dictionary with size limit
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Shuffling input files
Sample file '/sources/zstd-1.5.7/tests/../tests/zstreamtest.c' is too large, limiting to 128 KB
Sample file '/sources/zstd-1.5.7/tests/../programs/fileio.c' is too large, limiting to 128 KB
Sample file '/sources/zstd-1.5.7/tests/../tests/fuzzer.c' is too large, limiting to 128 KB
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 5 different sets of parameters
d=8
Training on 21 samples of total size 667036
Testing on 7 samples of total size 262371
Computing frequencies
k=50
20%       k=537
k=1024
k=1511
Breaking content into 7 epochs of size 95289
Breaking content into 81 epochs of size 8234
17%                                                                                                                                                            statistics ... 
53%       k=1998
                                                                                                                                                     statistics ... 
100%       Breaking content into 4 epochs of size 166757
                                                                                                                                                     statistics ... 
Breaking content into 2 epochs of size 333514
73%                                                                                                                                                            statistics ... 
Breaking content into 2 epochs of size 333514
                                                                                                                                                     statistics ... 
                                                                               k=1511
d=8
f=20
steps=4
split=75
accel=1
Save dictionary of size 4096 into file tmpDict2 
- Create dictionary with small size limit
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Shuffling input files
Sample file '/sources/zstd-1.5.7/tests/../tests/zstreamtest.c' is too large, limiting to 128 KB
Sample file '/sources/zstd-1.5.7/tests/../programs/fileio.c' is too large, limiting to 128 KB
Sample file '/sources/zstd-1.5.7/tests/../tests/fuzzer.c' is too large, limiting to 128 KB
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 5 different sets of parameters
d=8
Training on 21 samples of total size 667036
Testing on 7 samples of total size 262371
Computing frequencies
k=50
20%       k=537
k=1024
k=1511
FASTCOVER parameters incorrect
k=1998
FASTCOVER parameters incorrect
Breaking content into 1 epochs of size 667029
Breaking content into 20 epochs of size 33351
14%                                                                                                                                                            statistics ... 
Breaking content into 1 epochs of size 667029
52%                                                                                                                                                            statistics ... 
100%                                                                                                                                                            statistics ... 
                                                                               k=50
d=8
f=20
steps=4
split=75
accel=1
Save dictionary of size 1024 into file tmpDict3 
- Create dictionary with wrong parameter order (must fail)
error: command cannot be separated from its argument by another command 
- Compress without dictID
tmp                  : 18.24%   (  76.6 KiB =>   14.0 KiB, tmp.zst) 
tmp.zst             : 78430 bytes 
- Compress multiple files with dictionary
 41 files compressed : 18.63% (  1.10 MiB =>    210 KiB)
41 files decompressed : 1152730 bytes total 
dirTestDict/benchfn.c: OK
dirTestDict/benchfn.h: OK
dirTestDict/benchzstd.c: OK
dirTestDict/benchzstd.h: OK
dirTestDict/bigdict.c: OK
dirTestDict/checkTag.c: OK
dirTestDict/datagen.c: OK
dirTestDict/datagen.h: OK
dirTestDict/datagencli.c: OK
dirTestDict/decodecorpus.c: OK
dirTestDict/dibio.c: OK
dirTestDict/dibio.h: OK
dirTestDict/external_matchfinder.c: OK
dirTestDict/fileio.c: OK
dirTestDict/fileio.h: OK
dirTestDict/fileio_asyncio.c: OK
dirTestDict/fileio_asyncio.h: OK
dirTestDict/fileio_common.h: OK
dirTestDict/fileio_types.h: OK
dirTestDict/fullbench.c: OK
dirTestDict/fuzzer.c: OK
dirTestDict/invalidDictionaries.c: OK
dirTestDict/largeDictionary.c: OK
dirTestDict/legacy.c: OK
dirTestDict/longmatch.c: OK
dirTestDict/lorem.c: OK
dirTestDict/lorem.h: OK
dirTestDict/loremOut.c: OK
dirTestDict/paramgrill.c: OK
dirTestDict/platform.h: OK
dirTestDict/poolTests.c: OK
dirTestDict/roundTripCrash.c: OK
dirTestDict/seqgen.c: OK
dirTestDict/timefn.c: OK
dirTestDict/timefn.h: OK
dirTestDict/util.c: OK
dirTestDict/util.h: OK
dirTestDict/zstdcli.c: OK
dirTestDict/zstdcli_trace.c: OK
dirTestDict/zstdcli_trace.h: OK
dirTestDict/zstreamtest.c: OK
- dictionary builder on bogus input
Error 14 : nb of samples too low
Error 14 : nb of samples too low
- Test -o before --train
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 5 different sets of parameters
WARNING: The maximum dictionary size 112640 is too large compared to the source size 667029! size(source)/size(dictionary) = 5.921777, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
80%       100%                                                                                      k=1511
d=8
f=20
steps=4
split=75
accel=1
Save dictionary of size 112640 into file tmpDict 
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 5 different sets of parameters
WARNING: The maximum dictionary size 112640 is too large compared to the source size 667029! size(source)/size(dictionary) = 5.921777, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
80%                                                                                      k=1511
d=8
f=20
steps=4
split=75
accel=1
Save dictionary of size 112640 into file dictionary 
- Create dictionary with multithreading enabled
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 5 different sets of parameters
WARNING: The maximum dictionary size 112640 is too large compared to the source size 667029! size(source)/size(dictionary) = 5.921777, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
                                                                               k=1511
d=8
f=20
steps=4
split=75
accel=1
Save dictionary of size 112640 into file tmpDict 
- Test --memory for dictionary compression
!  Warning : setting manual memory limit for dictionary training data at 0 MB 
Training samples set too large (12 MB); training on 0 MB only...
Loading tmpCorpusHighCompress...                                                                                      Trying 5 different sets of parameters
Total number of training samples is 3 and is invalid
Failed to initialize context
dictionary training failed : Src size is incorrect 
!  Warning : setting manual memory limit for dictionary training data at 5 MB 
Training samples set too large (12 MB); training on 5 MB only...

===>  fastCover dictionary builder : advanced options 
- Create first dictionary
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Training on 28 samples of total size 929407
Testing on 28 samples of total size 929407
Computing frequencies
WARNING: The maximum dictionary size 112640 is too large compared to the source size 929400! size(source)/size(dictionary) = 8.251065, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
Building dictionary
Breaking content into 2020 epochs of size 460
94%                                                                                                                                                            statistics ... 
Constructed dictionary of size 112640
Save dictionary of size 112640 into file tmpDict 
tmp                  : 19.23%   (  76.6 KiB =>   14.7 KiB, tmp.zst) 
tmp.zst             : 78430 bytes 
- Create second (different) dictionary
Loading /sources/zstd-1.5.7/tests/../programs/util.c...                                                                                      Training on 41 samples of total size 996907
Testing on 41 samples of total size 996907
Computing frequencies
WARNING: The maximum dictionary size 112640 is too large compared to the source size 996900! size(source)/size(dictionary) = 8.850320, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
Building dictionary
Breaking content into 1780 epochs of size 560
0%       58%                                                                                                                                                            statistics ... 
Constructed dictionary of size 112640
Save dictionary of size 112640 into file tmpDictC 
tmp.zst : Decoding error (36) : Dictionary mismatch 
!  Warning : nb of samples too low for proper processing ! 
!  Please provide _one file per sample_. 
!  Alternatively, split files into fixed-size blocks representative of samples, with -B# 
Error 14 : nb of samples too low
- Create dictionary with short dictID
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Training on 28 samples of total size 929407
Testing on 28 samples of total size 929407
Computing frequencies
WARNING: The maximum dictionary size 112640 is too large compared to the source size 929400! size(source)/size(dictionary) = 8.251065, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
Building dictionary
Breaking content into 2020 epochs of size 460
48%                                                                                                                                                            statistics ... 
Constructed dictionary of size 112640
Save dictionary of size 112640 into file tmpDict1 
tmpDict tmpDict1 differ: char 5, line 1
- Create dictionaries with shrink-dict flag enabled
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 4 different sets of parameters
WARNING: The maximum dictionary size 112640 is too large compared to the source size 667029! size(source)/size(dictionary) = 5.921777, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
75%                                                                                      k=2000
d=6
f=20
steps=1
split=75
accel=1
Save dictionary of size 112640 into file tmpShrinkDict 
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 4 different sets of parameters
WARNING: The maximum dictionary size 112640 is too large compared to the source size 667029! size(source)/size(dictionary) = 5.921777, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
25%       75%                                                                                      k=2000
d=6
f=20
steps=1
split=75
accel=1
Save dictionary of size 112640 into file tmpShrinkDict1 
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 4 different sets of parameters
WARNING: The maximum dictionary size 112640 is too large compared to the source size 667029! size(source)/size(dictionary) = 5.921777, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
25%       75%                                                                                      k=2000
d=6
f=20
steps=1
split=75
accel=1
Save dictionary of size 112640 into file tmpShrinkDict2 
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 4 different sets of parameters
WARNING: The maximum dictionary size 112640 is too large compared to the source size 667029! size(source)/size(dictionary) = 5.921777, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
75%                                                                                      k=2000
d=6
f=20
steps=1
split=75
accel=1
Save dictionary of size 112640 into file tmpShrinkDict3 
- Create dictionary with size limit
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 4 different sets of parameters
75%                                                                                      k=2000
d=6
f=20
steps=1
split=75
accel=1
Save dictionary of size 4096 into file tmpDict2 
- Create dictionary using all samples for both training and testing
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Training on 28 samples of total size 929407
Testing on 28 samples of total size 929407
Computing frequencies
WARNING: The maximum dictionary size 112640 is too large compared to the source size 929400! size(source)/size(dictionary) = 8.251065, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
Building dictionary
Breaking content into 1659 epochs of size 560
0%       49%                                                                                                                                                            statistics ... 
Constructed dictionary of size 112640
Save dictionary of size 112640 into file dictionary 
- Create dictionary using f=16
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Training on 28 samples of total size 929407
Testing on 28 samples of total size 929407
Computing frequencies
WARNING: The maximum dictionary size 112640 is too large compared to the source size 929400! size(source)/size(dictionary) = 8.251065, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
Building dictionary
Breaking content into 1659 epochs of size 560
52%                                                                                                                                                            statistics ... 
Constructed dictionary of size 112640
Save dictionary of size 112640 into file dictionary 
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      FASTCOVER parameters incorrect
dictionary training failed : Parameter is out of bound 
- Create dictionary using accel=2
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Training on 28 samples of total size 929407
Testing on 28 samples of total size 929407
Computing frequencies
WARNING: The maximum dictionary size 112640 is too large compared to the source size 929400! size(source)/size(dictionary) = 8.251065, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
Building dictionary
Breaking content into 1659 epochs of size 560
0%       50%                                                                                                                                                            statistics ... 
Constructed dictionary of size 112640
Save dictionary of size 112640 into file dictionary 
- Create dictionary using accel=10
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Training on 28 samples of total size 929407
Testing on 28 samples of total size 929407
Computing frequencies
WARNING: The maximum dictionary size 112640 is too large compared to the source size 929400! size(source)/size(dictionary) = 8.251065, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
Building dictionary
Breaking content into 1659 epochs of size 560
0%       48%                                                                                                                                                            statistics ... 
Constructed dictionary of size 112640
Save dictionary of size 112640 into file dictionary 
- Create dictionary with multithreading
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Trying 82 different sets of parameters
WARNING: The maximum dictionary size 112640 is too large compared to the source size 667029! size(source)/size(dictionary) = 5.921777, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
7%       9%       10%       13%       14%       17%       19%       23%       24%       29%       34%       39%       43%       48%       51%       57%       62%       67%       71%       76%       81%       86%       91%       96%                                                                                      k=1970
d=8
f=20
steps=40
split=75
accel=1
Save dictionary of size 112640 into file dictionary 
- Test -o before --train-fastcover
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Training on 28 samples of total size 929407
Testing on 28 samples of total size 929407
Computing frequencies
WARNING: The maximum dictionary size 112640 is too large compared to the source size 929400! size(source)/size(dictionary) = 8.251065, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
Building dictionary
Breaking content into 1659 epochs of size 560
0%       53%                                                                                                                                                            statistics ... 
Constructed dictionary of size 112640
Save dictionary of size 112640 into file tmpDict 
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                      Training on 28 samples of total size 929407
Testing on 28 samples of total size 929407
Computing frequencies
WARNING: The maximum dictionary size 112640 is too large compared to the source size 929400! size(source)/size(dictionary) = 8.251065, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! 
Building dictionary
Breaking content into 1659 epochs of size 560
0%       50%                                                                                                                                                            statistics ... 
Constructed dictionary of size 112640
Save dictionary of size 112640 into file dictionary 

===>  legacy dictionary builder 
- Create first dictionary
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                                                                                            sorting 28 files of total size 0 MB ...
finding patterns ... 
0.67 % 27.83 % 64.57 % 98.83 %                                                                       statistics ... 
Save dictionary of size 62969 into file tmpDict 
tmp                  : 20.12%   (  76.6 KiB =>   15.4 KiB, tmp.zst) 
tmp.zst             : 78430 bytes 
!  Warning : nb of samples too low for proper processing ! 
!  Please provide _one file per sample_. 
!  Alternatively, split files into fixed-size blocks representative of samples, with -B# 
Error 14 : nb of samples too low
- Create second (different) dictionary
Loading /sources/zstd-1.5.7/tests/../programs/util.c...                                                                                                                                                            sorting 41 files of total size 0 MB ...
finding patterns ... 
0.38 % 23.75 % 46.37 % 79.39 %                                                                       statistics ... 
Save dictionary of size 68232 into file tmpDictC 
tmp.zst : Decoding error (36) : Dictionary mismatch 
- Create dictionary with short dictID
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                                                                                            sorting 28 files of total size 0 MB ...
finding patterns ... 
5.37 % 32.39 % 70.36 %                                                                       statistics ... 
Save dictionary of size 62969 into file tmpDict1 
tmpDict tmpDict1 differ: char 5, line 1
- Create dictionary with size limit
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                                                                                            sorting 28 files of total size 0 MB ...
finding patterns ... 
2.94 % 30.94 % 68.14 % !  note : calculated dictionary significantly larger than requested (62815 > 4096) 
!  consider increasing dictionary size, or produce denser dictionary (-s2) 
!  always test dictionary efficiency on real samples 
                                                                      statistics ... 
Save dictionary of size 4096 into file tmpDict2 
- Test -o before --train-legacy
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                                                                                            sorting 28 files of total size 0 MB ...
finding patterns ... 
5.07 % 32.05 % 68.21 % 100.00 %                                                                       statistics ... 
Save dictionary of size 62969 into file tmpDict 
Loading /sources/zstd-1.5.7/tests/../programs/benchzstd.c...                                                                                                                                                            sorting 28 files of total size 0 MB ...
finding patterns ... 
2.77 % 30.25 % 65.77 % 99.24 %                                                                       statistics ... 
Save dictionary of size 62969 into file dictionary 

===>  integrity tests 
test one file (tmp1.zst) 
tmp1                 : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp1.zst) 
tmp1.zst            : 65537 bytes 
tmp1.zst            : 65537 bytes 
test multiple files (*.zst) 
Warning : ./helloworld.link.zst is a symbolic link, ignoring 
4 files decompressed :  65565 bytes total 
test bad files (*) 
Warning : ./helloworld.link.zst is a symbolic link, ignoring 
zstd: ./DEPRECATED-test-zstd-speed.py: unsupported format 
zstd: ./Makefile: unsupported format 
zstd: ./README.md: unsupported format 
zstd: ./automated_benchmarking.py: unsupported format 
zstd: ./bigdict.c: unsupported format 
zstd: ./checkTag.c: unsupported format 
zstd: ./check_size.py: unsupported format 
zstd: ./cli-tests is a directory -- ignored 
zstd: ./datagen: unsupported format 
zstd: ./datagencli.c: unsupported format 
zstd: ./decodecorpus.c: unsupported format 
zstd: ./dict-files is a directory -- ignored 
zstd: ./external_matchfinder.c: unsupported format 
zstd: ./external_matchfinder.h: unsupported format 
zstd: ./fullbench.c: unsupported format 
zstd: ./fuzz is a directory -- ignored 
zstd: ./fuzzer.c: unsupported format 
zstd: ./golden-compression is a directory -- ignored 
zstd: ./golden-decompression is a directory -- ignored 
zstd: ./golden-decompression-errors is a directory -- ignored 
zstd: ./golden-dictionaries is a directory -- ignored 
zstd: ./gzip is a directory -- ignored 
zstd: ./invalidDictionaries.c: unsupported format 
zstd: ./largeDictionary.c: unsupported format 
zstd: ./legacy.c: unsupported format 
zstd: ./libzstd_builds.sh: unsupported format 
zstd: ./longmatch.c: unsupported format 
zstd: ./loremOut.c: unsupported format 
zstd: ./loremOut.h: unsupported format 
zstd: ./paramgrill.c: unsupported format 
zstd: ./playTests.sh: unsupported format 
zstd: ./poolTests.c: unsupported format 
zstd: ./rateLimiter.py: unsupported format 
zstd: ./regression is a directory -- ignored 
zstd: ./roundTripCrash.c: unsupported format 
zstd: ./seqgen.c: unsupported format 
zstd: ./seqgen.h: unsupported format 
zstd: ./test-license.py: unsupported format 
zstd: ./test-variants.sh: unsupported format 
zstd: ./test-zstd-versions.py: unsupported format 
zstd: ./tmp1: unsupported format 
zstd: ./zstreamtest.c: unsupported format 
4 files decompressed :  65565 bytes total 
zstd: tmp1: unsupported format 
zstd: tmp2.zst: unsupported format 
zstd: tmp3: unexpected end of file 
test --rm and --test combined 
tmp1.zst            : 65537 bytes 
2 files decompressed : 131074 bytes total 
tmpSplit.aa : Read error (39) : premature end 
zstd: tmpSplit.ab: unsupported format 
/*stdin*\           : 65537 bytes 

===>  golden files tests 
4 files decompressed : 1179657 bytes total 
/*stdin*\           : 463474 bytes 
/*stdin*\           : 1189 bytes 

===>  benchmark mode tests 
bench one file
Loading tmp1...                                                                              |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     21071 (x3.110),   5.04 MB/s  |-tmp1              :     65537 ->     21071 (x3.110),   5.04 MB/s,    6.7 MB/s 3#
bench multiple levels
Loading tmp1...                                                                              |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     21071 (x3.110),   4.99 MB/s  |-tmp1              :     65537 ->     21071 (x3.110),   4.99 MB/s,   11.9 MB/s 0#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     22162 (x2.957),   1.77 MB/s  |-tmp1              :     65537 ->     22162 (x2.957),   1.77 MB/s,   14.3 MB/s 1#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     21935 (x2.988),   8.48 MB/s  |-tmp1              :     65537 ->     21935 (x2.988),   8.48 MB/s,   14.5 MB/s 2#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     21071 (x3.110),   6.68 MB/s  |-tmp1              :     65537 ->     21071 (x3.110),   6.68 MB/s,   15.3 MB/s 3#
bench negative level
Loading tmp1...                                                                              |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     25894 (x2.531),   8.46 MB/s  |-tmp1              :     65537 ->     25894 (x2.531),   8.46 MB/s,    6.8 MB/s-1#
with recursive and quiet modes
bench 1.5.7 : input 65537 bytes, 0 seconds, 0 KB blocks
-1        22162 (2.957)   8.22 MB/s   42.3 MB/s  tmp1
-2        21935 (2.988)   2.70 MB/s   41.0 MB/s  tmp1
benchmark decompression only
tmp1                 : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp1.zst) 
Loading tmp1.zst...                                                                              |-tmp1.zst          :     65537 ->  |-tmp1.zst          :     65537 ->     21075 (x3.110),   0.00 MB/s,   12.1 MB/s 0#
benchmark can fail - decompression on invalid data
Loading tmp1...       Error 32 : Error while trying to assess decompressed size: data may be invalid 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
benchmark mode is only compatible with zstd
benchmark mode is only compatible with zstd format 

===>  zstd compatibility tests 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 

===>  gzip compatibility tests 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
gzip support detected
gzip 1.14
Copyright (C) 2025 Free Software Foundation, Inc.
Copyright (C) 1993 Jean-loup Gailly.
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <https://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

Written by Jean-loup Gailly.
tmp                  : 33.85%   (  64.0 KiB =>   21.7 KiB, tmp.gz) 
tmp.gz:	 OK
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmp.gz              : 65537 bytes 

===>  gzip frame tests 
tmp                  : 33.85%   (  64.0 KiB =>   21.7 KiB, tmp.gz) 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
/*stdin*\           : 262148 bytes 
22185+0 records in
22185+0 records out
22185 bytes (22 kB, 22 KiB) copied, 1.24608 s, 17.8 kB/s
zstd: /*stdin*\: premature gz end 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 

===>  xz compatibility tests 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
xz support detected
xz (XZ Utils) 5.8.1
liblzma 5.8.1
xz (XZ Utils) 5.8.1
liblzma 5.8.1
Testing zstd xz and lzma support
tmp                  : 31.27%   (  64.0 KiB =>   20.0 KiB, tmp.lzma) 
tmp                  : 31.34%   (  64.0 KiB =>   20.1 KiB, tmp.xz) 
tmp.xz: 20.1 KiB / 64.0 KiB = 0.313
tmp.lzma: 20.0 KiB / 64.0 KiB = 0.313
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmp.xz              : 65537 bytes 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmp.lzma            : 65537 bytes 
Creating symlinks
Testing xz and lzma symlinks
tmp                  : 31.34%   (  64.0 KiB =>   20.1 KiB, tmp.xz) 
tmp                  : 31.27%   (  64.0 KiB =>   20.0 KiB, tmp.lzma) 
Testing unxz and unlzma symlinks
tmp.xz              : 65537 bytes 
tmp.lzma            : 65537 bytes 

===>  xz frame tests 
tmp                  : 31.34%   (  64.0 KiB =>   20.1 KiB, tmp.xz) 
tmp                  : 31.27%   (  64.0 KiB =>   20.0 KiB, tmp.lzma) 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
/*stdin*\           : 393222 bytes 
20539+0 records in
20539+0 records out
20539 bytes (21 kB, 20 KiB) copied, 1.07939 s, 19.0 kB/s
zstd: /*stdin*\: premature lzma end 
20495+0 records in
20495+0 records out
20495 bytes (20 kB, 20 KiB) copied, 1.0721 s, 19.1 kB/s
zstd: /*stdin*\: premature lzma end 

===>  lz4 compatibility tests 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
lz4 support detected
*** lz4 v1.10.0 64-bit multithread, by Yann Collet ***
tmp                  : 41.86%   (  64.0 KiB =>   26.8 KiB, tmp.lz4) 
*** lz4 v1.10.0 64-bit multithread, by Yann Collet ***
Decompressed : 0 MiB                                                                                 tmp.lz4                        : decoded 65537 bytes 
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmp.lz4             : 65537 bytes 

===>  lz4 frame tests 
tmp                  : 41.86%   (  64.0 KiB =>   26.8 KiB, tmp.lz4) 
tmp                  : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp.zst) 
/*stdin*\           : 262148 bytes 
27435+0 records in
27435+0 records out
27435 bytes (27 kB, 27 KiB) copied, 1.40014 s, 19.6 kB/s
zstd: /*stdin*\: unfinished lz4 stream 

===> suffix list test
tmp1                 :  (     0 B =>     13 B, tmp1.zstd) 
tmp1.zstd           : 0 bytes 

===>  tar extension tests 
tmp.tar              : 29.56%   (  70.0 KiB =>   20.7 KiB, tmp.tzst) 
tmp.tzst            : 71680 bytes 
tmp.tgz             : 71680 bytes 
tmp.txz             : 71680 bytes 
tmp.tlz4            : 71680 bytes 
zstd: tmp.t: unknown suffix (.zst/.tzst/.gz/.tgz/.lzma/.xz/.txz/.lz4/.tlz4 expected). Can't derive the output file name. Specify it with -o dstFileName. Ignoring.
zstd: tmp.tz: unknown suffix (.zst/.tzst/.gz/.tgz/.lzma/.xz/.txz/.lz4/.tlz4 expected). Can't derive the output file name. Specify it with -o dstFileName. Ignoring.
zstd: tmp.tzs: unknown suffix (.zst/.tzst/.gz/.tgz/.lzma/.xz/.txz/.lz4/.tlz4 expected). Can't derive the output file name. Specify it with -o dstFileName. Ignoring.

===>  zstd round-trip tests 
roundTripTest: datagen   | zstd -v | zstd -d
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 32.10%   (  64.0 KiB =>   20.5 KiB, /*stdout*\) 
roundTripTest: datagen -g15K  | zstd -v | zstd -d
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 35.25%   (  15.0 KiB =>   5.29 KiB, /*stdout*\) 
roundTripTest: datagen -g127K  | zstd -v | zstd -d
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 31.45%   (   127 KiB =>   39.9 KiB, /*stdout*\) 
roundTripTest: datagen -g255K  | zstd -v | zstd -d
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 30.78%   (   255 KiB =>   78.5 KiB, /*stdout*\) 
roundTripTest: datagen -g522K  | zstd -v | zstd -d
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 30.32%   (   522 KiB =>    158 KiB, /*stdout*\) 
roundTripTest: datagen -g519K  | zstd -v6 | zstd -d6
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 29.27%   (   519 KiB =>    152 KiB, /*stdout*\) 
roundTripTest: datagen -g517K  | zstd -v16 | zstd -d16
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 26.04%   (   517 KiB =>    135 KiB, /*stdout*\) 
roundTripTest: datagen -g516K  | zstd -v19 | zstd -d19
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 25.79%   (   516 KiB =>    133 KiB, /*stdout*\) 
fileRoundTripTest: datagen -g500K  > tmp && zstd -v -c tmp | zstd -d
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmp                  : 30.34%   (   500 KiB =>    152 KiB, /*stdout*\) 

===>  zstd long distance matching round-trip tests 
roundTripTest: datagen -g0  | zstd -v2 --single-thread --long | zstd -d2 --single-thread --long
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            :  (     0 B =>     13 B, /*stdout*\) 
roundTripTest: datagen -g1000K  | zstd -v1 --single-thread --long | zstd -d1 --single-thread --long
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 32.51%   (  1000 KiB =>    325 KiB, /*stdout*\) 
roundTripTest: datagen -g517K  | zstd -v6 --single-thread --long | zstd -d6 --single-thread --long
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 29.27%   (   517 KiB =>    151 KiB, /*stdout*\) 
roundTripTest: datagen -g516K  | zstd -v16 --single-thread --long | zstd -d16 --single-thread --long
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 26.04%   (   516 KiB =>    134 KiB, /*stdout*\) 
roundTripTest: datagen -g518K  | zstd -v19 --single-thread --long | zstd -d19 --single-thread --long
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 25.78%   (   518 KiB =>    134 KiB, /*stdout*\) 
roundTripTest: datagen -g2M  | zstd -v22 --single-thread --ultra --long | zstd -d22 --single-thread --ultra --long
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 24.19%   (  2.00 MiB =>    495 KiB, /*stdout*\) 
fileRoundTripTest: datagen -g5M  > tmp && zstd -v3 --single-thread --long -c tmp | zstd -d3 --single-thread --long
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmp                  : 29.87%   (  5.00 MiB =>   1.49 MiB, /*stdout*\) 
roundTripTest: datagen -g96K  | zstd -v5 --single-thread | zstd -d5 --single-thread
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 31.14%   (  96.0 KiB =>   29.9 KiB, /*stdout*\) 

===>  zstdmt round-trip tests 
roundTripTest: datagen -g4M  | zstd -v1 -T0 | zstd -d1 -T0
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Note: 8 physical core(s) detected 
/*stdin*\            : 32.41%   (  4.00 MiB =>   1.30 MiB, /*stdout*\) 
roundTripTest: datagen -g4M  | zstd -v1 -T0 --auto-threads=physical | zstd -d1 -T0 --auto-threads=physical
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Note: 8 physical core(s) detected 
/*stdin*\            : 32.41%   (  4.00 MiB =>   1.30 MiB, /*stdout*\) 
roundTripTest: datagen -g4M  | zstd -v1 -T0 --auto-threads=logical | zstd -d1 -T0 --auto-threads=logical
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Note: 8 logical core(s) detected 
/*stdin*\            : 32.41%   (  4.00 MiB =>   1.30 MiB, /*stdout*\) 
roundTripTest: datagen -g8M  | zstd -v3 -T2 | zstd -d3 -T2
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Warning : decompression does not support multi-threading
/*stdin*\            : 29.83%   (  8.00 MiB =>   2.39 MiB, /*stdout*\) 
roundTripTest: datagen -g8000K  | zstd -v2 --threads=2 | zstd -d2 --threads=2
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Warning : decompression does not support multi-threading
/*stdin*\            : 31.30%   (  7.81 MiB =>   2.45 MiB, /*stdout*\) 
fileRoundTripTest: datagen -g4M  > tmp && zstd -v19 -T2 -B1M -c tmp | zstd -d19 -T2 -B1M
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Warning : decompression does not support multi-threading
tmp                  : 23.60%   (  4.00 MiB =>    967 KiB, /*stdout*\) 

===>  zstdmt long distance matching round-trip tests 
roundTripTest: datagen -g8M  | zstd -v3 --long=24 -T2 | zstd -d3 --long=24 -T2
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Warning : decompression does not support multi-threading
/*stdin*\            : 29.89%   (  8.00 MiB =>   2.39 MiB, /*stdout*\) 

===>  zstdmt environment variable tests 
Ignore environment variable setting ZSTD_NBTHREADS=-3: not a valid unsigned value 
mt_tmp               :244.44%   (     9 B =>     22 B, mt_tmp.zst) 
Ignore environment variable setting ZSTD_NBTHREADS=: not a valid unsigned value 
mt_tmp               :244.44%   (     9 B =>     22 B, mt_tmp.zst) 
Ignore environment variable setting ZSTD_NBTHREADS=-: not a valid unsigned value 
mt_tmp               :244.44%   (     9 B =>     22 B, mt_tmp.zst) 
Ignore environment variable setting ZSTD_NBTHREADS=a: not a valid unsigned value 
mt_tmp               :244.44%   (     9 B =>     22 B, mt_tmp.zst) 
Ignore environment variable setting ZSTD_NBTHREADS=+a: not a valid unsigned value 
mt_tmp               :244.44%   (     9 B =>     22 B, mt_tmp.zst) 
Ignore environment variable setting ZSTD_NBTHREADS=3a7: not a valid unsigned value 
mt_tmp               :244.44%   (     9 B =>     22 B, mt_tmp.zst) 
Ignore environment variable setting ZSTD_NBTHREADS=50000000000: numeric value too large 
mt_tmp               :244.44%   (     9 B =>     22 B, mt_tmp.zst) 
mt_tmp               :244.44%   (     9 B =>     22 B, mt_tmp.zst) 
mt_tmp               :244.44%   (     9 B =>     22 B, mt_tmp.zst) 

===>  ovLog tests 

===>  zstd --list/-l single frame tests 
  3 files compressed : 32.16% (   192 KiB =>   61.7 KiB)
Warning : ./helloworld.link.zst is a symbolic link, ignoring 
Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename
     1      0      16   B         7   B  0.438   None  ./hello.zst
     2      0      40   B        14   B  0.350  XXH64  ./helloworld.zst
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  ./tmp1.zst
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  ./tmp2.zst
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  ./tmp3.zst
     1      0      16   B         7   B  0.438   None  ./world.zst
----------------------------------------------------------------- 
     7      0    61.8 KiB       192 KiB  3.107         6 files
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Warning : ./helloworld.link.zst is a symbolic link, ignoring 
Decompressed Size: 7 B (7 B)
Decompressed Size: 14 B (14 B)
Decompressed Size: 64.0 KiB (65537 B)
Decompressed Size: 64.0 KiB (65537 B)
Decompressed Size: 64.0 KiB (65537 B)
Decompressed Size: 7 B (7 B)
Warning : ./helloworld.link.zst is a symbolic link, ignoring 
Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename
     1      0      16   B         7   B  0.438   None  ./hello.zst
     2      0      40   B        14   B  0.350  XXH64  ./helloworld.zst
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  ./tmp1.zst
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  ./tmp2.zst
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  ./tmp3.zst
     1      0      16   B         7   B  0.438   None  ./world.zst
----------------------------------------------------------------- 
     7      0    61.8 KiB       192 KiB  3.107         6 files
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Warning : ./helloworld.link.zst is a symbolic link, ignoring 
./hello.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 7 B (7 B)
Compressed Size: 16 B (16 B)
Decompressed Size: 7 B (7 B)
Ratio: 0.4375
Check: None

./helloworld.zst 
# Zstandard Frames: 2
DictID: 0
Window Size: 7 B (7 B)
Compressed Size: 40 B (40 B)
Decompressed Size: 14 B (14 B)
Ratio: 0.3500
Check: XXH64

./tmp1.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 20.6 KiB (21075 B)
Decompressed Size: 64.0 KiB (65537 B)
Ratio: 3.1097
Check: XXH64 e7bace8d

./tmp2.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 20.6 KiB (21075 B)
Decompressed Size: 64.0 KiB (65537 B)
Ratio: 3.1097
Check: XXH64 e7bace8d

./tmp3.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 20.6 KiB (21075 B)
Decompressed Size: 64.0 KiB (65537 B)
Ratio: 3.1097
Check: XXH64 e7bace8d

./world.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 7 B (7 B)
Compressed Size: 16 B (16 B)
Decompressed Size: 7 B (7 B)
Ratio: 0.4375
Check: None


===>  zstd --list/-l multiple frame tests 
Warning : ./helloworld.link.zst is a symbolic link, ignoring 
Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename
     1      0      16   B         7   B  0.438   None  ./hello.zst
     2      0      40   B        14   B  0.350  XXH64  ./helloworld.zst
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  ./tmp1.zst
     2      0    41.2 KiB       128 KiB  3.110  XXH64  ./tmp12.zst
     3      0    61.7 KiB       192 KiB  3.110  XXH64  ./tmp123.zst
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  ./tmp2.zst
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  ./tmp3.zst
     1      0      16   B         7   B  0.438   None  ./world.zst
----------------------------------------------------------------- 
    12      0     165 KiB       512 KiB  3.109         8 files
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Warning : ./helloworld.link.zst is a symbolic link, ignoring 
./hello.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 7 B (7 B)
Compressed Size: 16 B (16 B)
Decompressed Size: 7 B (7 B)
Ratio: 0.4375
Check: None

./helloworld.zst 
# Zstandard Frames: 2
DictID: 0
Window Size: 7 B (7 B)
Compressed Size: 40 B (40 B)
Decompressed Size: 14 B (14 B)
Ratio: 0.3500
Check: XXH64

./tmp1.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 20.6 KiB (21075 B)
Decompressed Size: 64.0 KiB (65537 B)
Ratio: 3.1097
Check: XXH64 e7bace8d

./tmp12.zst 
# Zstandard Frames: 2
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 41.2 KiB (42150 B)
Decompressed Size: 128 KiB (131074 B)
Ratio: 3.1097
Check: XXH64

./tmp123.zst 
# Zstandard Frames: 3
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 61.7 KiB (63225 B)
Decompressed Size: 192 KiB (196611 B)
Ratio: 3.1097
Check: XXH64

./tmp2.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 20.6 KiB (21075 B)
Decompressed Size: 64.0 KiB (65537 B)
Ratio: 3.1097
Check: XXH64 e7bace8d

./tmp3.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 20.6 KiB (21075 B)
Decompressed Size: 64.0 KiB (65537 B)
Ratio: 3.1097
Check: XXH64 e7bace8d

./world.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 7 B (7 B)
Compressed Size: 16 B (16 B)
Decompressed Size: 7 B (7 B)
Ratio: 0.4375
Check: None


===>  zstd --list/-l error detection tests 
Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename
File "tmp1" not compressed by zstd 
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  tmp1.zst
----------------------------------------------------------------- 
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  1 files
Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename
File "tmp1" not compressed by zstd 
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  tmp1.zst
     2      0    41.2 KiB       128 KiB  3.110  XXH64  tmp12.zst
     3      0    61.7 KiB       192 KiB  3.110  XXH64  tmp123.zst
File "tmp2" not compressed by zstd 
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  tmp2.zst
File "tmp3" not compressed by zstd 
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  tmp3.zst
----------------------------------------------------------------- 
     8      0     165 KiB       512 KiB  3.110  XXH64  5 files
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
File "tmp1" not compressed by zstd 

tmp1.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 20.6 KiB (21075 B)
Decompressed Size: 64.0 KiB (65537 B)
Ratio: 3.1097
Check: XXH64 e7bace8d

tmp12.zst 
# Zstandard Frames: 2
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 41.2 KiB (42150 B)
Decompressed Size: 128 KiB (131074 B)
Ratio: 3.1097
Check: XXH64

tmp123.zst 
# Zstandard Frames: 3
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 61.7 KiB (63225 B)
Decompressed Size: 192 KiB (196611 B)
Ratio: 3.1097
Check: XXH64

*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
File "tmp2" not compressed by zstd 

tmp12.zst 
# Zstandard Frames: 2
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 41.2 KiB (42150 B)
Decompressed Size: 128 KiB (131074 B)
Ratio: 3.1097
Check: XXH64

test : detect truncated compressed file 
truncatable-input.txt : 32.58%   (  48.8 KiB =>   15.9 KiB, truncatable-input.txt.zst) 
100+0 records in
100+0 records out
100 bytes copied, 0.0175538 s, 5.7 kB/s
Error: could not read checksum 
Error while parsing "truncated-input.txt.zst" 
Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename
     0      0     100   B      48.8 KiB  500.000  XXH64  truncated-input.txt.zst

===>  zstd --list/-l errors when presented with stdin / no files
No files given 
zstd: --list does not support reading from standard input 
zstd: --list does not support reading from standard input 
No files given 
zstd: --list does not support reading from standard input 
zstd: --list does not support reading from standard input 
zstd: --list does not support reading from standard input 
Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename
     1      0    20.6 KiB      64.0 KiB  3.110  XXH64  tmp1.zst

===>  zstd --list/-l test with null files 
tmp5                 :  (     0 B =>     13 B, tmp5.zst) 
Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename
     1      0      13   B         0   B  0.000  XXH64  tmp5.zst
Error: reached end of file with incomplete frame 
Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename
File "tmp5" not compressed by zstd 
     1      0      13   B         0   B  0.000  XXH64  tmp5.zst
----------------------------------------------------------------- 
     1      0      13   B         0   B  0.000  XXH64  1 files
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Decompressed Size: 0 B (0 B)
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
Error: reached end of file with incomplete frame 
File "tmp5" not compressed by zstd 

tmp5.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 0 B (0 B)
Compressed Size: 13 B (13 B)
Decompressed Size: 0 B (0 B)
Ratio: 0.0000
Check: XXH64 51d8e999


===>  zstd --list/-l test with no content size field 
Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename
     1      0     156 KiB                       XXH64  tmp6.zst
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***

===>   zstd --list/-l test with no checksum 
tmp1                 : 32.15%   (  64.0 KiB =>   20.6 KiB, tmp1.zst) 
Frames  Skips  Compressed  Uncompressed  Ratio  Check  Filename
     1      0    20.6 KiB      64.0 KiB  3.110   None  tmp1.zst
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
tmp1.zst 
# Zstandard Frames: 1
DictID: 0
Window Size: 64.0 KiB (65537 B)
Compressed Size: 20.6 KiB (21071 B)
Decompressed Size: 64.0 KiB (65537 B)
Ratio: 3.1103
Check: None


===>  zstd trace tests 
tmp1                 : 32.16%   (  64.0 KiB =>   20.6 KiB, tmp1.zst) 
  3 files compressed : 32.16% (   192 KiB =>   61.7 KiB)
zstd: WARNING: all input files will be processed and concatenated into a single output file: /dev/null 
The concatenated output CANNOT regenerate original file names nor directory structure. 
  3 files compressed : 32.16% (   192 KiB =>   61.7 KiB)
  3 files compressed : 32.16% (   192 KiB =>   61.7 KiB)
zstd: WARNING: all input files will be processed and concatenated into a single output file: /dev/null 
The concatenated output CANNOT regenerate original file names nor directory structure. 
  2 files compressed : 0.04% (   128 KiB =>     48   B)
zstd: WARNING: all input files will be processed and concatenated into a single output file: /dev/null 
The concatenated output CANNOT regenerate original file names nor directory structure. 
  2 files compressed : 0.04% (   128 KiB =>     48   B)
tmp1.zst            : 65537 bytes 
2 files decompressed : 131074 bytes total 
tmp1.zst            : 65537 bytes 
3 files decompressed : 196611 bytes total 
/*stdin*\           : 65537 bytes 
Loading tmp1...                                                                              |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     22162 (x2.957),   7.37 MB/s  |-tmp1              :     65537 ->     22162 (x2.957),   7.37 MB/s,   11.6 MB/s 1#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     21935 (x2.988),   5.17 MB/s  |-tmp1              :     65537 ->     21935 (x2.988),   5.17 MB/s,   14.7 MB/s 2#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     21071 (x3.110),   4.90 MB/s  |-tmp1              :     65537 ->     21071 (x3.110),   4.90 MB/s,   13.3 MB/s 3#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     21360 (x3.068),   3.19 MB/s  |-tmp1              :     65537 ->     21360 (x3.068),   3.19 MB/s,   14.0 MB/s 4#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     20911 (x3.134),   3.07 MB/s  |-tmp1              :     65537 ->     20911 (x3.134),   3.07 MB/s,   14.1 MB/s 5#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     20507 (x3.196),   5.87 MB/s  |-tmp1              :     65537 ->     20507 (x3.196),   5.87 MB/s,   14.3 MB/s 6#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     20362 (x3.219),   4.48 MB/s  |-tmp1              :     65537 ->     20362 (x3.219),   4.48 MB/s,   13.5 MB/s 7#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     20336 (x3.223),   4.48 MB/s  |-tmp1              :     65537 ->     20336 (x3.223),   4.48 MB/s,   13.7 MB/s 8#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     20321 (x3.225),   3.83 MB/s  |-tmp1              :     65537 ->     20321 (x3.225),   3.83 MB/s,   13.9 MB/s 9#
                                                                       |-tmp1              :     65537 ->  |-tmp1              :     65537 ->     20349 (x3.221),   3.49 MB/s  |-tmp1              :     65537 ->     20349 (x3.221),   3.49 MB/s,   14.1 MB/s10#
Loading tmp1...       Loading tmp2...       Loading tmp3...                                                                              |- 3 files          :    196611 ->  |- 3 files          :    196611 ->     66486 (x2.957),   12.4 MB/s  |- 3 files          :    196611 ->     66486 (x2.957),   12.4 MB/s,   49.9 MB/s 1#
                                                                       |- 3 files          :    196611 ->  |- 3 files          :    196611 ->     65805 (x2.988),   11.2 MB/s  |- 3 files          :    196611 ->     65805 (x2.988),   11.2 MB/s,   49.9 MB/s 2#
                                                                       |- 3 files          :    196611 ->  |- 3 files          :    196611 ->     63213 (x3.110),   11.1 MB/s  |- 3 files          :    196611 ->     63213 (x3.110),   11.1 MB/s,   21.2 MB/s 3#
                                                                       |- 3 files          :    196611 ->  |- 3 files          :    196611 ->     64080 (x3.068),   6.98 MB/s  |- 3 files          :    196611 ->     64080 (x3.068),   6.98 MB/s,   19.6 MB/s 4#
                                                                       |- 3 files          :    196611 ->  |- 3 files          :    196611 ->     62733 (x3.134),   5.21 MB/s  |- 3 files          :    196611 ->     62733 (x3.134),   5.21 MB/s,   20.4 MB/s 5#
                                                                       |- 3 files          :    196611 ->  |- 3 files          :    196611 ->     61521 (x3.196),   6.49 MB/s  |- 3 files          :    196611 ->     61521 (x3.196),   6.49 MB/s,   21.1 MB/s 6#
                                                                       |- 3 files          :    196611 ->  |- 3 files          :    196611 ->     61086 (x3.219),   4.77 MB/s  |- 3 files          :    196611 ->     61086 (x3.219),   4.77 MB/s,   21.0 MB/s 7#
                                                                       |- 3 files          :    196611 ->  |- 3 files          :    196611 ->     61008 (x3.223),   4.96 MB/s  |- 3 files          :    196611 ->     61008 (x3.223),   4.96 MB/s,   21.3 MB/s 8#
                                                                       |- 3 files          :    196611 ->  |- 3 files          :    196611 ->     60963 (x3.225),   3.16 MB/s  |- 3 files          :    196611 ->     60963 (x3.225),   3.16 MB/s,   10.3 MB/s 9#
                                                                       |- 3 files          :    196611 ->  |- 3 files          :    196611 ->     61047 (x3.221),   3.04 MB/s  |- 3 files          :    196611 ->     61047 (x3.221),   3.04 MB/s,   20.2 MB/s10#

===>   zstd long distance matching tests 
roundTripTest: datagen -g0  | zstd -v --single-thread --long | zstd -d --single-thread --long
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            :  (     0 B =>     13 B, /*stdout*\) 
roundTripTest: datagen -g9M  | zstd -v2 --single-thread --long | zstd -d2 --single-thread --long
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 31.33%   (  9.00 MiB =>   2.82 MiB, /*stdout*\) 
roundTripTest: datagen -g1M -P50 | zstd -v1 --single-thread --long=29 | zstd -d --memory=512MB
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 31.24%   ( 1.000 MiB =>    320 KiB, /*stdout*\) 
roundTripTest: datagen -g1M -P50 | zstd -v1 --single-thread --long=29 --zstd=wlog=28 | zstd -d --memory=256MB
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 31.24%   ( 1.000 MiB =>    320 KiB, /*stdout*\) 
roundTripTest: datagen -g1M -P50 | zstd -v1 --single-thread --long=29 | zstd -d --long=28 --memory=512MB
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 31.24%   ( 1.000 MiB =>    320 KiB, /*stdout*\) 
roundTripTest: datagen -g1M -P50 | zstd -v1 --single-thread --long=29 | zstd -d --zstd=wlog=28 --memory=512MB
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 31.24%   ( 1.000 MiB =>    320 KiB, /*stdout*\) 
./playTests.sh: line 1692: [: : integer expected

===>  zstd asyncio tests 
roundTripTest: datagen -g2M  | zstd -v3 --asyncio --format=zstd | zstd -d3 --asyncio --format=zstd
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 29.95%   (  2.00 MiB =>    613 KiB, /*stdout*\) 
roundTripTest: datagen -g2M  | zstd -v3 --no-asyncio --format=zstd | zstd -d3 --no-asyncio --format=zstd
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 29.95%   (  2.00 MiB =>    613 KiB, /*stdout*\) 
roundTripTest: datagen -g2M  | zstd -v3 --asyncio --format=gzip | zstd -d3 --asyncio --format=gzip
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 32.53%   (  2.00 MiB =>    666 KiB, /*stdout*\) 
roundTripTest: datagen -g2M  | zstd -v3 --no-asyncio --format=gzip | zstd -d3 --no-asyncio --format=gzip
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 32.53%   (  2.00 MiB =>    666 KiB, /*stdout*\) 
roundTripTest: datagen -g2M  | zstd -v3 --asyncio --format=lzma | zstd -d3 --asyncio --format=lzma
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 29.46%   (  2.00 MiB =>    603 KiB, /*stdout*\) 
roundTripTest: datagen -g2M  | zstd -v3 --no-asyncio --format=lzma | zstd -d3 --no-asyncio --format=lzma
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 29.46%   (  2.00 MiB =>    603 KiB, /*stdout*\) 
roundTripTest: datagen -g2M  | zstd -v3 --asyncio --format=lz4 | zstd -d3 --asyncio --format=lz4
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 39.14%   (  2.00 MiB =>    802 KiB, /*stdout*\) 
roundTripTest: datagen -g2M  | zstd -v3 --no-asyncio --format=lz4 | zstd -d3 --no-asyncio --format=lz4
*** Zstandard CLI (64-bit) v1.5.7, by Yann Collet ***
/*stdin*\            : 39.14%   (  2.00 MiB =>    802 KiB, /*stdout*\) 
Skipping large data tests
\n******************************
All tests completed successfully
******************************
make[1]: Leaving directory '/sources/zstd-1.5.7/tests'
